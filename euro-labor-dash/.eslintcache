[{"C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\index.tsx":"1","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\reportWebVitals.ts":"2","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\App.tsx":"3","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\DashContainer.tsx":"4","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\ControlPanel.tsx":"5","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\services\\URLgenerationFunctions.tsx":"6","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\Earnings.tsx":"7","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\Vacancies.tsx":"8","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\Unemployment.tsx":"9","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\graphComponents\\Line.tsx":"10","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\services\\graphUtilityFunctions.tsx":"11","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\graphComponents\\Bar.tsx":"12","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\graphComponents\\Dot.tsx":"13","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\HoverTable.tsx":"14","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\HoverTableRow.tsx":"15"},{"size":500,"mtime":499162500000,"results":"16","hashOfConfig":"17"},{"size":425,"mtime":499162500000,"results":"18","hashOfConfig":"17"},{"size":234,"mtime":1607705143385,"results":"19","hashOfConfig":"17"},{"size":6497,"mtime":1615232124185,"results":"20","hashOfConfig":"17"},{"size":838,"mtime":1615232124184,"results":"21","hashOfConfig":"17"},{"size":1536,"mtime":1614703120697,"results":"22","hashOfConfig":"17"},{"size":2834,"mtime":1615232124186,"results":"23","hashOfConfig":"17"},{"size":2677,"mtime":1615232124190,"results":"24","hashOfConfig":"17"},{"size":3000,"mtime":1615232124189,"results":"25","hashOfConfig":"17"},{"size":1716,"mtime":1614872670914,"results":"26","hashOfConfig":"17"},{"size":6327,"mtime":1615232124193,"results":"27","hashOfConfig":"17"},{"size":1752,"mtime":1615232124191,"results":"28","hashOfConfig":"17"},{"size":1854,"mtime":1615232124192,"results":"29","hashOfConfig":"17"},{"size":2972,"mtime":1615232124187,"results":"30","hashOfConfig":"17"},{"size":3988,"mtime":1615232124188,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"ofp5zp",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"34"},"C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\index.tsx",[],["69","70"],"C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\reportWebVitals.ts",[],"C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\App.tsx",[],"C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\DashContainer.tsx",["71","72","73","74"],"C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\ControlPanel.tsx",[],"C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\services\\URLgenerationFunctions.tsx",[],"C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\Earnings.tsx",["75","76"],"import React from \"react\";\r\nimport Bar from \"./graphComponents/Bar\";\r\n\r\nimport {\r\n  chartDimensions,\r\n  xScaleAnnual,\r\n  generateYAxisFull,\r\n  generateXaxisFull,\r\n  yScale_imported,\r\n  consistentArrayLengths,\r\n  missingDataMessage,\r\n  generateGraphTitle,\r\n  generateYaxisValues,\r\n} from \"../services/graphUtilityFunctions\";\r\n\r\n\r\ninterface EarningsProps {\r\n  children?: any;\r\n  selectedCountry: string;\r\n  netEarningsData: any;\r\n  isFetching: boolean;\r\n  mouseYear:number; \r\n}\r\n\r\nconst Earnings: React.FC<EarningsProps> = ({\r\n  // netEarningsData: netEarningsData,\r\n  netEarningsData,\r\n  selectedCountry,\r\n  isFetching,\r\n  mouseYear, \r\n}) => {\r\n  let labels: Array<any> = [];\r\n  let values_net: Array<number> = [1, 2, 3];\r\n  let yAxis: any;\r\n  let xAxis: any;\r\n  let fetchError : boolean = false; \r\n  let errorMessage: any; \r\n  const seriesName: string = 'Earnings';\r\n  let graphTitle:any; \r\n\r\n  let bars: any;\r\n\r\n  values_net = netEarningsData.values;\r\n  labels = netEarningsData.labels\r\n\r\n\r\n  //   console.log(selectedCountry)\r\n  // console.log('yAxis values', generateYaxisValues(values_net))\r\n  // console.log('raw', values_net)\r\n  \r\n  if(values_net=== null){\r\n    fetchError=true \r\n  }else{\r\n    fetchError=false\r\n  }\r\n  \r\n  \r\n  \r\n  if (Array.isArray(values_net)) {\r\n\r\n    labels = consistentArrayLengths(labels, values_net)[0]\r\n    values_net = consistentArrayLengths(labels, values_net)[1]\r\n\r\n\r\n  }\r\n  \r\n  \r\n\r\n  if (Array.isArray(values_net)) {\r\n    values_net = values_net.map((el) => Math.round(el / 1000));\r\n  }\r\n\r\n\r\n  if (Array.isArray(values_net)) {\r\n    // values_net = values_net.map((el: any) => Math.round(el));\r\n\r\n\r\n    yAxis = generateYAxisFull(values_net);\r\n    xAxis = generateXaxisFull(labels);\r\n\r\n    \r\n\r\n\r\n    bars = values_net.map((row: any, ind: number) => (\r\n\r\n      <Bar\r\n        labelScaled={xScaleAnnual(ind)}\r\n        // labelsRaw = {labels[ind]}\r\n        currentHover = {mouseYear=== labels[ind]?true: false}\r\n        valueScaled={yScale_imported(values_net, row)}\r\n        valueRaw = {row}\r\n        barWidth={chartDimensions.dataPoints.barWidth}\r\n        key={ind}\r\n      />\r\n    ));\r\n  }\r\n\r\n  if(values_net=== null){\r\n    \r\n    errorMessage = missingDataMessage(seriesName, selectedCountry)\r\n  }\r\n\r\n  graphTitle = generateGraphTitle(seriesName, selectedCountry)\r\n\r\n  return (\r\n    <>\r\n      {/* <div>{JSON.stringify(netEarningsData)}</div> */}\r\n\r\n      {/* <div>{`${selectedCountry} Net Earnings`}</div> */}\r\n\r\n      {/* <div className='graphContainer'> */}\r\n      <div >\r\n        <svg id=\"earningsGraph\"\r\n          width={chartDimensions.chartAreaWidth}\r\n          height={chartDimensions.chartAreaHeight}\r\n        >\r\n          {graphTitle}\r\n          {errorMessage}\r\n          {yAxis}\r\n          {xAxis}\r\n          {bars}\r\n        </svg>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Earnings;\r\n","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\Vacancies.tsx",[],"C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\Unemployment.tsx",["77","78","79"],"import React, { useEffect, useState } from \"react\";\r\nimport Dotz from \"./graphComponents/Dot\";\r\nimport Linez from \"../components/graphComponents/Line\";\r\n\r\nimport {\r\n  chartDimensions,\r\n  yScale_imported,\r\n  xScaleAnnual,\r\n  generateYAxisFull,\r\n  generateXaxisFull,\r\n  generateYaxisValues,\r\n  consistentArrayLengths,\r\n  generateGraphTitle,\r\n  missingDataMessage,\r\n} from \"../services/graphUtilityFunctions\";\r\n\r\ninterface UnemploymentProps {\r\n  selectedCountry: string;\r\n  unemploymentData: any;\r\n  isFetching: boolean;\r\n  mouseX: number; \r\n   mouseY: number;\r\n}\r\n\r\nconst Unemployment: React.FC<UnemploymentProps> = ({\r\n  selectedCountry,\r\n  unemploymentData,\r\n  isFetching,\r\n  mouseX, \r\n  mouseY\r\n}) => {\r\n  let labels: Array<any> | any = [1, 2, 3];\r\n  let values_unemp: Array<number> = [];\r\n  let yAxis: any;\r\n  let xAxis: any;\r\n  let xAxisLine: any;\r\n  let lineComponent: any;\r\n  let values_unempScaled: any;\r\n  let dots: any;\r\n  let fetchError : boolean = false; \r\n  let errorMessage: any; \r\n  const seriesName: string = 'Unemployment';\r\n  let graphTitle:any; \r\n\r\n\r\n  \r\n  labels = unemploymentData.labels;\r\n  values_unemp = unemploymentData.values;\r\n  \r\n  // console.log(selectedCountry)\r\n  // console.log('yAxis values', generateYaxisValues(values_unemp))\r\n  // console.log('raw', values_unemp)\r\n\r\n  if(values_unemp=== null){\r\n    fetchError=true \r\n  }else{\r\n    fetchError=false\r\n  }\r\n  \r\n\r\n  if (!fetchError && values_unemp !== undefined && values_unemp !==null) {\r\n  // if(values_unemp!== undefined){\r\n    labels = consistentArrayLengths(labels, values_unemp)[0]\r\n    values_unemp = consistentArrayLengths(labels, values_unemp)[1]\r\n\r\n  }\r\n\r\n\r\n\r\n  if (Array.isArray(values_unemp)) {\r\n\r\n\r\n    values_unempScaled = values_unemp.map((el) =>\r\n      yScale_imported(values_unemp, el)\r\n    );\r\n    const labelsScaled = values_unemp.map((el, ind) => xScaleAnnual(ind));\r\n\r\n\r\n    yAxis = generateYAxisFull(values_unemp);\r\n    xAxis = generateXaxisFull(labels);\r\n\r\n    lineComponent = (\r\n      <Linez valuesScaled={values_unempScaled} labelsScaled={labelsScaled} />\r\n    );\r\n\r\n    dots = (\r\n      <Dotz\r\n        valuesRaw={values_unemp}\r\n        valuesScaled={values_unempScaled}\r\n        labels={labels}\r\n        mouseX={mouseX}\r\n        mouseY={mouseY}\r\n        isFetching={isFetching}\r\n      />\r\n    );\r\n  }\r\n\r\n  if(fetchError){\r\n    errorMessage = missingDataMessage(seriesName, selectedCountry)\r\n  }\r\n\r\n  graphTitle = generateGraphTitle(seriesName, selectedCountry)\r\n  \r\n\r\n\r\n  return (\r\n    <>\r\n      {/* <div>{JSON.stringify(unemploymentData)}</div> */}\r\n\r\n      {/* <div className='graphContainer'> */}\r\n      <div >\r\n        <svg id=\"unempGraph\"\r\n          width={chartDimensions.chartAreaWidth}\r\n          height={chartDimensions.chartAreaHeight}\r\n        >\r\n         {graphTitle}\r\n          {errorMessage}\r\n          {dots}\r\n          {lineComponent}\r\n          {yAxis}\r\n          {xAxis}\r\n          {xAxisLine}\r\n        </svg>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Unemployment;\r\n","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\graphComponents\\Line.tsx",["80","81","82"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    line,\r\n    select,\r\n  } from \"d3\";\r\n\r\n  import {xScaleQuarterly} from \"../../services/graphUtilityFunctions\";\r\n\r\n\r\n  interface LineProps {\r\n\r\n    valuesScaled:any; \r\n    labelsScaled:any; \r\n  }\r\n\r\n\r\n  const Linez: React.FC<LineProps>= (valuesScaled: any, labelsScaled: any) => {\r\n\r\n    valuesScaled = valuesScaled.valuesScaled\r\n    labelsScaled = labelsScaled.lablesScaled;\r\n\r\n\r\n    const [lineValues, setLineValues] = useState([1, 2, 3]);\r\n  \r\n    const lineRef: any = React.createRef();\r\n\r\n \r\n  \r\n    useEffect(() => {\r\n      if (Array.isArray(valuesScaled)) {\r\n        setLineValues(valuesScaled);\r\n  \r\n        const currentLine = select(lineRef.current);\r\n        animateLine(currentLine, valuesScaled);\r\n      }\r\n    },[valuesScaled]);\r\n  \r\n    return (\r\n      <g>\r\n        <path ref={lineRef} />\r\n      </g>\r\n    );\r\n  };\r\n  \r\n  const animateLine = (\r\n    currentLine: any,\r\n    valuesScaled: Array<number>\r\n  ) => {\r\n  \r\n  \r\n    if (Array.isArray(valuesScaled)) {\r\n      const drawLine = line()\r\n        // .x((d: any, i: any) => i * 10 + 50)\r\n        .x((d: any, i: any) => xScaleQuarterly(i))\r\n        //Passing function does not work :(\r\n        // .x((d: any, i: any) => xScale(i))\r\n        .y((d: any) => d);\r\n  \r\n      const linePath = drawLine(valuesScaled as Array<number> | any);\r\n  \r\n      currentLine\r\n        .transition()\r\n        .duration(1000)\r\n        .attr(\"d\", linePath)\r\n        .attr(\"fill\", \"none\")\r\n        .attr(\"stroke\", \"black\");\r\n    }\r\n  };\r\n\r\n  export default Linez\r\n","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\services\\graphUtilityFunctions.tsx",[],"C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\graphComponents\\Bar.tsx",["83"],"import React, { useEffect } from \"react\";\r\nimport {select} from \"d3\";\r\nimport {chartDimensions} from \"../../services/graphUtilityFunctions\"\r\n\r\ninterface BarProps {\r\n  labelScaled: number;\r\n    valueScaled: number;\r\n    barWidth: number;\r\n    valueRaw:number; \r\n    currentHover: boolean\r\n\r\n\r\n  }\r\n\r\n\r\nconst Bar: React.FC<BarProps> = ({\r\n    labelScaled,\r\n    valueScaled,\r\n    barWidth,\r\n    valueRaw, \r\n    currentHover\r\n\r\n  }) => {\r\n    if (isNaN(valueScaled) || valueRaw===0) {\r\n      valueScaled = 0;\r\n    }\r\n  \r\n    const rectRef: any = React.createRef();\r\n  \r\n    useEffect(() => {\r\n      animateBars(rectRef, valueScaled, currentHover);\r\n    });\r\n\r\n  \r\n    return (\r\n      <g>\r\n        <rect ref={rectRef} id={`${valueScaled}`}\r\n        x={labelScaled}\r\n        \r\n        width={barWidth} fill={currentHover? \"pink\":\"black\"}/>\r\n      </g>\r\n    );\r\n  };\r\n  \r\n\r\n\r\n\r\n\r\n\r\n  \r\nconst animateBars = (rectRef: any, valueScaled: number, currentHover: boolean) => {\r\n    const rect = select(rectRef.current);\r\n\r\n    let y_net :number=1; \r\n\r\n    if (valueScaled===0){\r\n      valueScaled = 0\r\n      y_net=0\r\n    }else{\r\n\r\n      valueScaled = chartDimensions.chartHeightInner - valueScaled \r\n      y_net = chartDimensions.chartHeightInner - valueScaled- chartDimensions.margin.bottom\r\n    }\r\n    // const y_net = chartDimensions.chartHeightInner - valueScaled- chartDimensions.margin.bottom\r\n\r\n    let fillValue = 'black'\r\n    if(currentHover){\r\n      fillValue = 'pink'\r\n    }else{\r\n      fillValue = 'black'\r\n    }\r\n\r\n    rect\r\n  \r\n      .transition()\r\n      // .duration(1000)\r\n      .duration(500)\r\n      .attr(\"height\", valueScaled)\r\n      .attr(\"y\", y_net?y_net:0)\r\n      // .attr(\"fill\", fillValue)\r\n      // .attr(\"y\", 0);\r\n  };\r\n\r\nexport default Bar","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\graphComponents\\Dot.tsx",[],"C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\HoverTable.tsx",["84","85","86","87","88","89","90"],"import React from \"react\";\r\nimport {\r\n  chartDimensions,\r\n  consistentArrayLengths,\r\n  generateYaxisValues,\r\n} from \"../services/graphUtilityFunctions\";\r\nimport HoverTableRow from \"./HoverTableRow\";\r\n\r\ninterface HoverTableProps {\r\n  selectedCountry: string;\r\n  mouseX: number;\r\n  mouseY?: number;\r\n  netEarningsData: any;\r\n  unemploymentData: any;\r\n  vacanciesData: any;\r\n}\r\n\r\nconst HoverTable: React.FC<HoverTableProps> = ({\r\n  selectedCountry,\r\n  mouseX,\r\n  netEarningsData,\r\n  unemploymentData,\r\n  vacanciesData,\r\n  // mouseY,\r\n}) => {\r\n  let labels_vac: Array<any> = [1, 2, 3];\r\n  let values_vac: Array<number> = [1, 2, 3];\r\n  let labels_unemp: Array<any> = [1, 2, 3];\r\n  let values_unemp: Array<number> = [1, 2, 3];\r\n  let labels_net: Array<any> = [1, 2, 3];\r\n  let values_net: Array<number> = [1, 2, 3];\r\n\r\n  let yearHovered: number;\r\n  let yearQuarterHovered: string;\r\n  let hoverValue_net: number = 0;\r\n  let hoverValue_vac: number = 0;\r\n  let fetchError_net: boolean = false;\r\n  let fetchError_vac: boolean = false;\r\n  let fetchError_unemp: boolean = false;\r\n\r\n\r\n  values_vac = vacanciesData.values;\r\n  labels_vac = vacanciesData.labels;\r\n\r\n  values_unemp = unemploymentData.values;\r\n  labels_unemp = unemploymentData.labels;\r\n\r\n  values_net = netEarningsData.values;\r\n  labels_net = netEarningsData.labels;\r\n\r\n  // console.log('raw data', values_vac)\r\n  // console.log('formatted values', generateYaxisValues(values_vac))\r\n\r\n\r\n  if (!Array.isArray(values_vac)||values_vac===null) {\r\n    fetchError_vac = true;\r\n  } else {\r\n    fetchError_vac = false;\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <table id=\"fullHoverTable\">\r\n        <thead >\r\n          <tr>\r\n            <th colSpan={2} id=\"hoverTableTitle\">Hover Data</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {/* <tr>\r\n            <td>Period</td>\r\n            <td>Value</td>\r\n          </tr> */}\r\n          <tr>\r\n            <th colSpan={2}>Earnings (K) </th>\r\n          </tr>\r\n\r\n          {/* net earnings row  */}\r\n\r\n          <HoverTableRow\r\n          mouseX = {mouseX}\r\n          fetchError = {fetchError_net}\r\n          values = {values_net}\r\n          labels ={labels_net}\r\n          isQuarterly = {false}          \r\n          />\r\n\r\n          <tr>\r\n            <th colSpan={2}>Unemployment</th>\r\n          </tr>\r\n          {/* unemp row */}\r\n          <HoverTableRow\r\n            mouseX={mouseX}\r\n            fetchError={fetchError_unemp}\r\n            values={values_unemp}\r\n            labels={labels_unemp}\r\n            isQuarterly={true}\r\n          />\r\n\r\n          <tr>\r\n            <th colSpan={2} id=\"vacancyTableTitle\">Vacancy Rate</th>\r\n          </tr>\r\n          {/* vacancies row  */}\r\n          <HoverTableRow\r\n            mouseX={mouseX}\r\n            fetchError={fetchError_vac}\r\n            values={values_vac}\r\n            labels={labels_vac}\r\n            isQuarterly={false}\r\n          />\r\n        </tbody>\r\n      </table>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HoverTable;\r\n","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\HoverTableRow.tsx",["91","92"],"import React, { useEffect } from \"react\";\r\nimport {\r\n  chartDimensions,\r\n  consistentArrayLengths,\r\n} from \"../services/graphUtilityFunctions\";\r\n\r\ninterface HoverTableRowProps {\r\n  mouseX: number;\r\n  values: Array<any>;\r\n  labels: Array<any>;\r\n  fetchError: boolean;\r\n  isQuarterly: boolean;\r\n}\r\n\r\nconst HoverTableRow: React.FC<HoverTableRowProps> = ({\r\n  mouseX,\r\n  values,\r\n  labels,\r\n  fetchError,\r\n  isQuarterly,\r\n}) => {\r\n  let yearHovered: number;\r\n  let yearQuarterHovered: string;\r\n  let finalYearOutput: string;\r\n\r\n  if (!fetchError && values !== undefined && values !== null) {\r\n    // if ( values!==null ) {\r\n    labels = consistentArrayLengths(labels, values)[0];\r\n    values = consistentArrayLengths(labels, values)[1];\r\n  }\r\n\r\n  function returnQuarterFromMouseX(mouseX: number) {\r\n    let quarterXDistance = chartDimensions.dataPoints.centerToCenter / 4;\r\n    let closestQuarter = Math.floor(mouseX / quarterXDistance) % 4;\r\n    if (closestQuarter === 0) {\r\n      closestQuarter = 4;\r\n    }\r\n    let closestYear = returnYearFromMouseX(mouseX);\r\n\r\n    if (mouseX < 50) {\r\n      closestQuarter = 1;\r\n    }\r\n    if (mouseX > 690) {\r\n      closestQuarter = 4;\r\n    }\r\n\r\n    let yearQuarter = `${closestYear}-Q${closestQuarter}`;\r\n\r\n    return yearQuarter;\r\n  }\r\n\r\n  function returnYearFromMouseX(mouseX: number) {\r\n    let yearOutput: number;\r\n    let yearXDistance = chartDimensions.dataPoints.centerToCenter;\r\n    let yearXStart = 50;\r\n\r\n    yearOutput = Math.floor((mouseX - yearXStart) / yearXDistance + 2005);\r\n    if (yearOutput < 2005) {\r\n      yearOutput = 2005;\r\n    }\r\n    if (yearOutput > 2020) {\r\n      yearOutput = 2020;\r\n    }\r\n\r\n    return yearOutput;\r\n  }\r\n\r\n  yearHovered = returnYearFromMouseX(mouseX);\r\n\r\n  function hoverValueFromAnnualData(\r\n    labelsArray: Array<any>,\r\n    valuesArray: Array<any>\r\n  ) {\r\n    if (fetchError || values === undefined) {\r\n      return \"No Data\";\r\n    } else {\r\n      const indexPoz = labelsArray.indexOf(yearHovered);\r\n      const valueOutput = valuesArray[indexPoz];\r\n\r\n      if (valueOutput === 0 || valueOutput === undefined) {\r\n        return \"No Data\";\r\n      } else {\r\n        return valueOutput;\r\n      }\r\n    }\r\n  }\r\n\r\n  function hoverValueFromQuarterlyData(\r\n    mouseX: number,\r\n    valuesArray: Array<any>\r\n  ) {\r\n    if (fetchError || values === undefined || values === null) {\r\n      return \"No Data\";\r\n    }\r\n\r\n    valuesArray = consistentArrayLengths(labels, values)[1];\r\n\r\n    // console.log(\"values in hover component\", valuesArray)\r\n    // console.log(\"labels in hover component\", labels)\r\n\r\n    let quarterXDistance = chartDimensions.dataPoints.centerToCenter / 4;\r\n    let mouseQuarters = Math.floor(mouseX / quarterXDistance);\r\n\r\n    mouseQuarters -= 5;\r\n\r\n    if (mouseQuarters < 0) {\r\n      mouseQuarters = 0;\r\n    }\r\n\r\n    if (mouseQuarters > 61) {\r\n      // last element of values array\r\n      return valuesArray.slice(-1)[0];\r\n    }\r\n\r\n    const valueOutput = valuesArray[mouseQuarters];\r\n\r\n    return valueOutput;\r\n  }\r\n\r\n  function formatFinalValue(valueOutput: any) {\r\n    if (valueOutput === \"No Data\") {\r\n      return valueOutput;\r\n    } else {\r\n      valueOutput = parseFloat(valueOutput);\r\n    }\r\n\r\n    // console.log(valueOutput)\r\n\r\n    if (valueOutput > 1000) {\r\n      return (valueOutput / 1000).toFixed(2);\r\n    } else {\r\n      return valueOutput.toFixed(2);\r\n    }\r\n  }\r\n\r\n  let valueHovered = isQuarterly\r\n    ? hoverValueFromQuarterlyData(mouseX, values)\r\n    : hoverValueFromAnnualData(labels, values);\r\n\r\n  let finalValueOutput = formatFinalValue(valueHovered);\r\n\r\n  finalYearOutput = isQuarterly\r\n    ? returnQuarterFromMouseX(mouseX)\r\n    : `${returnYearFromMouseX(mouseX)}`;\r\n\r\n  return (\r\n    <tr>\r\n      <td className=\"tableCell\">{finalYearOutput}</td>\r\n      <td\r\n        className={\r\n          finalValueOutput === \"No Data\" ? \"tableCell noData\" : \"tableCell\"\r\n        }\r\n      >\r\n        {finalValueOutput}\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default HoverTableRow;\r\n",{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":104,"column":6,"nodeType":"99","endLine":104,"endColumn":23,"suggestions":"100"},{"ruleId":"97","severity":1,"message":"101","line":108,"column":6,"nodeType":"99","endLine":108,"endColumn":23,"suggestions":"102"},{"ruleId":"97","severity":1,"message":"103","line":112,"column":6,"nodeType":"99","endLine":112,"endColumn":23,"suggestions":"104"},{"ruleId":"105","severity":1,"message":"106","line":130,"column":9,"nodeType":"107","messageId":"108","endLine":130,"endColumn":12},{"ruleId":"109","severity":1,"message":"110","line":13,"column":3,"nodeType":"107","messageId":"111","endLine":13,"endColumn":22},{"ruleId":"109","severity":1,"message":"112","line":54,"column":5,"nodeType":"107","messageId":"111","endLine":54,"endColumn":15},{"ruleId":"109","severity":1,"message":"113","line":1,"column":17,"nodeType":"107","messageId":"111","endLine":1,"endColumn":26},{"ruleId":"109","severity":1,"message":"114","line":1,"column":28,"nodeType":"107","messageId":"111","endLine":1,"endColumn":36},{"ruleId":"109","severity":1,"message":"110","line":11,"column":3,"nodeType":"107","messageId":"111","endLine":11,"endColumn":22},{"ruleId":"109","severity":1,"message":"115","line":7,"column":28,"nodeType":"107","messageId":"111","endLine":7,"endColumn":43},{"ruleId":"109","severity":1,"message":"116","line":27,"column":12,"nodeType":"107","messageId":"111","endLine":27,"endColumn":22},{"ruleId":"97","severity":1,"message":"117","line":40,"column":7,"nodeType":"99","endLine":40,"endColumn":21,"suggestions":"118"},{"ruleId":"109","severity":1,"message":"119","line":70,"column":7,"nodeType":"107","messageId":"111","endLine":70,"endColumn":16},{"ruleId":"109","severity":1,"message":"115","line":3,"column":3,"nodeType":"107","messageId":"111","endLine":3,"endColumn":18},{"ruleId":"109","severity":1,"message":"120","line":4,"column":3,"nodeType":"107","messageId":"111","endLine":4,"endColumn":25},{"ruleId":"109","severity":1,"message":"110","line":5,"column":3,"nodeType":"107","messageId":"111","endLine":5,"endColumn":22},{"ruleId":"109","severity":1,"message":"121","line":33,"column":7,"nodeType":"107","messageId":"111","endLine":33,"endColumn":26},{"ruleId":"109","severity":1,"message":"122","line":34,"column":7,"nodeType":"107","messageId":"111","endLine":34,"endColumn":33},{"ruleId":"109","severity":1,"message":"123","line":35,"column":7,"nodeType":"107","messageId":"111","endLine":35,"endColumn":29},{"ruleId":"109","severity":1,"message":"124","line":36,"column":7,"nodeType":"107","messageId":"111","endLine":36,"endColumn":29},{"ruleId":"109","severity":1,"message":"113","line":1,"column":17,"nodeType":"107","messageId":"111","endLine":1,"endColumn":26},{"ruleId":"109","severity":1,"message":"122","line":23,"column":7,"nodeType":"107","messageId":"111","endLine":23,"endColumn":33},"no-native-reassign",["125"],"no-negated-in-lhs",["126"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData_net'. Either include it or remove the dependency array.","ArrayExpression",["127"],"React Hook useEffect has a missing dependency: 'fetchData_vacancies'. Either include it or remove the dependency array.",["128"],"React Hook useEffect has a missing dependency: 'fetchData_unemployemnt'. Either include it or remove the dependency array.",["129"],"@typescript-eslint/no-redeclare","'rez' is already defined.","Identifier","redeclared","@typescript-eslint/no-unused-vars","'generateYaxisValues' is defined but never used.","unusedVar","'fetchError' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'chartDimensions' is defined but never used.","'lineValues' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'lineRef'. Either include it or remove the dependency array.",["130"],"'fillValue' is assigned a value but never used.","'consistentArrayLengths' is defined but never used.","'yearHovered' is defined but never used.","'yearQuarterHovered' is defined but never used.","'hoverValue_net' is assigned a value but never used.","'hoverValue_vac' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},"Update the dependencies array to be: [fetchData_net, selectedCountry]",{"range":"139","text":"140"},"Update the dependencies array to be: [fetchData_vacancies, selectedCountry]",{"range":"141","text":"142"},"Update the dependencies array to be: [fetchData_unemployemnt, selectedCountry]",{"range":"143","text":"144"},"Update the dependencies array to be: [lineRef, valuesScaled]",{"range":"145","text":"146"},[2954,2971],"[fetchData_net, selectedCountry]",[3027,3044],"[fetchData_vacancies, selectedCountry]",[3103,3120],"[fetchData_unemployemnt, selectedCountry]",[937,951],"[lineRef, valuesScaled]"]