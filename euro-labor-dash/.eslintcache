[{"C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\index.tsx":"1","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\reportWebVitals.ts":"2","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\App.tsx":"3","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\DashContainer.tsx":"4","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\ControlPanel.tsx":"5","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\services\\URLgenerationFunctions.tsx":"6","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\Earnings.tsx":"7","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\Vacancies.tsx":"8","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\Unemployment.tsx":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":234,"mtime":1607705143385,"results":"13","hashOfConfig":"11"},{"size":4635,"mtime":1611591123376,"results":"14","hashOfConfig":"11"},{"size":621,"mtime":1610980120750,"results":"15","hashOfConfig":"11"},{"size":1581,"mtime":1610980120756,"results":"16","hashOfConfig":"11"},{"size":5043,"mtime":1611591038568,"results":"17","hashOfConfig":"11"},{"size":482,"mtime":1611060204392,"results":"18","hashOfConfig":"11"},{"size":7106,"mtime":1611760720541,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"ofp5zp",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":1,"source":"39","usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},"C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\index.tsx",[],["43","44"],"C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\reportWebVitals.ts",[],"C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\App.tsx",[],"C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\DashContainer.tsx",["45","46","47"],"import React, { useState, useEffect } from \"react\";\r\nimport ControlPanel from \"./ControlPanel\";\r\nimport {\r\n  generateFetchURL_net,\r\n  // generateFetchURL_vacancies,\r\n  generateFetchURL_unemployemnt,\r\n} from \"../services/URLgenerationFunctions\";\r\nimport Earnings from \"./Earnings\";\r\nimport Unemployment from \"./Unemployment\"\r\n// import Vacancies from \"./Vacancies\"\r\n\r\n\r\nconst DashContainer: React.FC = () => {\r\n  const [selectedCountry, setSelectedCountry] = useState<string>(\"Euro area\");\r\n  const [netEarningsData, setNetEarningsData] = useState({\r\n    data: {},\r\n    isFetching: false,\r\n    status: \"\",\r\n  });\r\n  // const [vacancyData, setVacancyData] = useState({\r\n  //   data:{}, \r\n  //   isFetching: false,\r\n  //   status: \"\",\r\n  // })\r\n  const [unemploymentData, setUnemploymentData] = useState({\r\n    data: {},\r\n    isFetching: false,\r\n    status: \"\",\r\n  });\r\n\r\n\r\n\r\n\r\n\r\n  function fetchData_net() {\r\n    const fetchURL_net: string = generateFetchURL_net(selectedCountry);\r\n\r\n    netEarningsData.isFetching=true\r\n\r\n    fetch(fetchURL_net)\r\n      .then((res) => res.json())\r\n      .then((res) =>\r\n        setNetEarningsData({\r\n          data: returnLabelsAndValues(res),\r\n          isFetching: false,\r\n          status: \"\",\r\n\r\n        })\r\n      )\r\n      .catch((error: string) =>\r\n        setNetEarningsData({ data: {}, isFetching: false, status: error, })\r\n      );\r\n\r\n  }\r\n  function fetchData_unemployemnt(){\r\n\r\n  const fetchURL_unemployment: string = generateFetchURL_unemployemnt(selectedCountry);\r\n\r\n  netEarningsData.isFetching=true\r\n\r\n  fetch(fetchURL_unemployment)\r\n    .then((res) => res.json())\r\n    .then((res) =>\r\n      setUnemploymentData({\r\n        data: returnLabelsAndValues(res),\r\n        isFetching: false,\r\n        status: \"\",\r\n\r\n      })\r\n    )\r\n    .catch((error: string) =>\r\n       setUnemploymentData({ data: {}, isFetching: false, status: error, })\r\n    );\r\n\r\n}\r\n\r\n// function fetchData_vacancies(){\r\n\r\n//   const fetchURL_vac: string = generateFetchURL_vacancies(selectedCountry);\r\n\r\n//   netEarningsData.isFetching=true\r\n\r\n//   fetch(fetchURL_vac)\r\n//     .then((res) => res.json())\r\n//     .then((res) =>\r\n//         setVacancyData({\r\n//         data: returnLabelsAndValues(res),\r\n//         isFetching: false,\r\n//         status: \"\",\r\n\r\n//       })\r\n//     )\r\n//     .catch((error: string) =>\r\n//        setVacancyData({ data: {}, isFetching: false, status: error, })\r\n//     );\r\n\r\n// }\r\n\r\n  useEffect(() => {\r\n    fetchData_net();\r\n    // fetchData_vacancies();\r\n    fetchData_unemployemnt()\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchData_net();\r\n    // fetchData_vacancies();\r\n    fetchData_unemployemnt()\r\n  }, [selectedCountry]);\r\n\r\n  function changeCountry(newCountry: string): void {\r\n    setSelectedCountry(newCountry);\r\n  }\r\n\r\n  function returnLabelsAndValues(obj: any): any | null {\r\n    interface rez {\r\n      labels?: any | undefined;\r\n      values?: any | undefined;\r\n      seriesName?: any | undefined;\r\n    }\r\n\r\n    let rez = {\r\n      labels: null,\r\n      values: null,\r\n      seriesName: null,\r\n    };\r\n\r\n    if (Object.keys(obj).length < 3) {\r\n      return rez;\r\n    }\r\n\r\n    rez[\"labels\"] = obj.series.docs[0].period;\r\n    rez[\"values\"] = obj.series.docs[0].value;\r\n    rez[\"seriesName\"] = obj.series.docs[0].series_name;\r\n\r\n\r\n\r\n    return rez;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <ControlPanel\r\n          changeCountry={changeCountry}\r\n          defaultCountry=\"Euro area\"\r\n          // defaultCountry=\"Romania\"\r\n        />\r\n      </div>\r\n      {/* <div>\r\n        <Vacancies \r\n        selectedCountry={selectedCountry}\r\n        vacancyData = {vacancyData.data}\r\n        isFetching = {vacancyData.isFetching}\r\n        />\r\n      </div> */}\r\n\r\n\r\n      <div>\r\n        <Unemployment\r\n        isFetching = {unemploymentData.isFetching}\r\n        selectedCountry={selectedCountry}\r\n        unemploymentData = {unemploymentData.data}\r\n        \r\n        />\r\n      </div>\r\n      <br style={{backgroundColor:\"white\"}}></br>\r\n\r\n      <div>\r\n        <Earnings\r\n          netEarningsData={netEarningsData.data}\r\n          selectedCountry={selectedCountry}\r\n          isFetching={netEarningsData.isFetching}\r\n\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DashContainer;\r\n\r\n//   interface PropsWithChildren<netEarningsData>{\r\n//     labels: any | undefined;\r\n//     values?: any | undefined;\r\n//     seriesName?: any | undefined;\r\n// }\r\n// interface intrinsicAttributes{\r\n//   netEarningsData: {lables: any, values: any }\r\n// }\r\n\r\n// interface netEarningsData{\r\n//   labels: any | undefined;\r\n//   values?: any | undefined;\r\n//   seriesName?: any | undefined;\r\n// }\r\n","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\ControlPanel.tsx",[],"C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\services\\URLgenerationFunctions.tsx",[],"C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\Earnings.tsx",["48","49","50","51","52"],"import React, { useEffect, useState } from \"react\";\r\nimport { scaleLinear, max, min, mean, select } from \"d3\";\r\nimport { create } from \"domain\";\r\n\r\nconst animateBars = (rectRef: any, y_net: number, barHeight_net: number) => {\r\n  const rect = select(rectRef.current);\r\n\r\n  rect\r\n\r\n    .transition()\r\n    .duration(1000)\r\n    .attr(\"height\", barHeight_net)\r\n    .attr(\"y\", y_net);\r\n};\r\n\r\ninterface BarProps {\r\n  x: number;\r\n  y_net: number;\r\n  barWidth: number;\r\n  barHeight_net: number;\r\n  yValue: number;\r\n  yearLabel: any;\r\n  yearLableYPoz: number;\r\n}\r\n\r\nconst Bar: React.FC<BarProps> = ({\r\n  x,\r\n  y_net,\r\n  barWidth,\r\n  barHeight_net,\r\n  yValue,\r\n  yearLabel,\r\n  yearLableYPoz,\r\n}) => {\r\n  if (isNaN(y_net)) {\r\n    y_net = 0;\r\n  }\r\n\r\n  const axisText: number = 125;\r\n  const rectRef: any = React.createRef();\r\n\r\n  useEffect(() => {\r\n    animateBars(rectRef, y_net, barHeight_net);\r\n  });\r\n\r\n  return (\r\n    <g>\r\n      <rect ref={rectRef} x={x} width={barWidth} fill=\"black\" />\r\n      <text\r\n        x={x}\r\n        y={yearLableYPoz}\r\n        // style={{transform:'rotate(1deg)'}}\r\n      >\r\n        {yearLabel}\r\n      </text>\r\n    </g>\r\n  );\r\n};\r\n\r\ninterface EarningsProps {\r\n  children?: any;\r\n  selectedCountry?: string;\r\n  netEarningsData: any;\r\n\r\n  isFetching: boolean;\r\n}\r\n\r\nconst Earnings: React.FC<EarningsProps> = ({\r\n  netEarningsData: netEarningsData,\r\n  selectedCountry,\r\n  isFetching,\r\n}) => {\r\n  const barAreaHeight = 400;\r\n  const barAreaWidth = 700;\r\n  const margin = { top: 30, right: 70, bottom: 10, left: 50 };\r\n  const barChartHeight = barAreaHeight - margin.bottom;\r\n\r\n  const barDimensions = {\r\n    barWidth: 12,\r\n    barSideMargin: 0.2,\r\n    centerToCenter: 40,\r\n    labelMarginTop: 2,\r\n  };\r\n\r\n  let labels: Array<any> = [];\r\n  let values_net: Array<Number> = [1, 2, 3];\r\n  let yScale_net: any;\r\n  let yAxisValues :Array<Number> = [];\r\n\r\n\r\n  // let bars: any = <rect></rect>;\r\n  let bars: any;\r\n\r\n  function generateYaxisValues(ar :Number[]){\r\n    const point1  = min(ar)\r\n    const point5 = max(ar)\r\n    const point3 = mean([point1, point5])\r\n    const point2 = mean([point1, point3])\r\n    const point4 =  mean([point5, point3])\r\n    let rez  = [point5, point4, point3, point2, point1]\r\n\r\n    return rez.map((el :any)=>Math.round(el))\r\n  }\r\n\r\n\r\n  values_net = netEarningsData.values;\r\n  if (values_net !== undefined) {\r\n    labels = netEarningsData.labels.map((year: any) => parseInt(year));\r\n  }\r\n\r\n  if (min(labels) < 2005 && values_net !== undefined) {\r\n    const elementsToSlice = 2005 - min(labels);\r\n    labels = labels.slice(elementsToSlice);\r\n    values_net = values_net.slice(elementsToSlice);\r\n  }\r\n\r\n  if (min(labels) > 2005 && values_net !== undefined) {\r\n    const minYear = min(labels);\r\n    const elementsToAdd: number = minYear - 2005;\r\n\r\n    for (let i = 0; i < elementsToAdd; i++) {\r\n      labels.unshift(labels[0] - 1);\r\n      values_net.unshift(0);\r\n    }\r\n\r\n    values_net = values_net.slice(elementsToAdd);\r\n  }\r\n\r\n\r\n\r\n  if (values_net !== undefined) {\r\n    yScale_net = scaleLinear()\r\n      .domain([min(values_net) as number, max(values_net) as number])\r\n      .range([margin.bottom, barAreaHeight - margin.top]);\r\n  } else {\r\n    //used as a placeholder when waiting for values to arrive\r\n    yScale_net = scaleLinear().domain([0, 100]).range([5, barChartHeight]);\r\n  }\r\n\r\n  const xScale = scaleLinear()\r\n    .domain([min(labels) as number, max(labels) as number])\r\n    .range([margin.left, barAreaWidth]);\r\n\r\n  if (values_net !== undefined) {\r\n    values_net  =values_net.map((el :any)=>Math.round(el))\r\n\r\n    yAxisValues = generateYaxisValues(values_net)\r\n\r\n\r\n\r\n    bars = values_net.map((row: any, ind: number) => (\r\n      <Bar\r\n        x={ind * barDimensions.centerToCenter + margin.left}\r\n        y_net={\r\n          values_net === undefined || values_net.length === 0\r\n            ? 0\r\n            : barChartHeight - yScale_net(values_net[ind])-10\r\n        }\r\n        barWidth={barDimensions.barWidth}\r\n        barHeight_net={\r\n          values_net === undefined || values_net.length === 0\r\n            ? 0\r\n            : yScale_net(values_net[ind])\r\n        }\r\n        yValue={0}\r\n        key={ind}\r\n        yearLabel={labels[ind]}\r\n        yearLableYPoz={barChartHeight + margin.bottom}\r\n      />\r\n    ));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* <div>{JSON.stringify(netEarningsData)}</div> */}\r\n\r\n      {/* <div>{`${selectedCountry} Net Earnings`}</div> */}\r\n\r\n      <div style={{ backgroundColor: \"grey\", height: 400, width: 700 }}>\r\n        <svg width={barAreaWidth} height={barAreaHeight}>\r\n          {yAxisValues.map(el=>(\r\n            <text key={`yaxis ${el}`} x={5} y={barAreaHeight-yScale_net(el)}>{el}</text>\r\n          ))}\r\n          <line\r\n            id=\"xAxis\"\r\n            x1={margin.left}\r\n            y1={barChartHeight - margin.bottom}\r\n            x2={barAreaWidth - margin.right}\r\n            y2={barChartHeight - margin.bottom}\r\n            stroke=\"black\"\r\n          />\r\n\r\n          {bars}\r\n        </svg>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Earnings;\r\n","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\Vacancies.tsx",["53","54","55","56","57","58","59","60","61"],"import React, { useEffect, useState } from \"react\";\r\nimport { scaleLinear, max, min, mean, select } from \"d3\";\r\nimport { create } from \"domain\";\r\n\r\n\r\ninterface VacancyProps{\r\n\r\n    selectedCountry?: string;\r\n    vacancyData: any;\r\n    isFetching: boolean;\r\n}\r\n\r\n\r\n\r\n\r\nconst Vacancies: React.FC<VacancyProps>=({\r\n    vacancyData: vacancyData, \r\n    selectedCountry, \r\n    isFetching\r\n\r\n\r\n}) =>{\r\n\r\n    return  <div>{JSON.stringify(vacancyData)}</div>\r\n}\r\n\r\n\r\nexport default Vacancies",["62","63"],"C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\Unemployment.tsx",["64","65","66","67","68","69","70"],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":103,"column":6,"nodeType":"77","endLine":103,"endColumn":8,"suggestions":"78"},{"ruleId":"75","severity":1,"message":"76","line":109,"column":6,"nodeType":"77","endLine":109,"endColumn":23,"suggestions":"79"},{"ruleId":"80","severity":1,"message":"81","line":122,"column":9,"nodeType":"82","messageId":"83","endLine":122,"endColumn":12},{"ruleId":"84","severity":1,"message":"85","line":1,"column":28,"nodeType":"82","messageId":"86","endLine":1,"endColumn":36},{"ruleId":"84","severity":1,"message":"87","line":3,"column":10,"nodeType":"82","messageId":"86","endLine":3,"endColumn":16},{"ruleId":"84","severity":1,"message":"88","line":39,"column":9,"nodeType":"82","messageId":"86","endLine":39,"endColumn":25},{"ruleId":"89","severity":1,"message":"90","line":69,"column":3,"nodeType":"91","messageId":"92","endLine":69,"endColumn":35,"fix":"93"},{"ruleId":"84","severity":1,"message":"94","line":140,"column":9,"nodeType":"82","messageId":"86","endLine":140,"endColumn":15},{"ruleId":"84","severity":1,"message":"95","line":1,"column":17,"nodeType":"82","messageId":"86","endLine":1,"endColumn":26},{"ruleId":"84","severity":1,"message":"85","line":1,"column":28,"nodeType":"82","messageId":"86","endLine":1,"endColumn":36},{"ruleId":"84","severity":1,"message":"96","line":2,"column":10,"nodeType":"82","messageId":"86","endLine":2,"endColumn":21},{"ruleId":"84","severity":1,"message":"97","line":2,"column":23,"nodeType":"82","messageId":"86","endLine":2,"endColumn":26},{"ruleId":"84","severity":1,"message":"98","line":2,"column":28,"nodeType":"82","messageId":"86","endLine":2,"endColumn":31},{"ruleId":"84","severity":1,"message":"99","line":2,"column":33,"nodeType":"82","messageId":"86","endLine":2,"endColumn":37},{"ruleId":"84","severity":1,"message":"100","line":2,"column":39,"nodeType":"82","messageId":"86","endLine":2,"endColumn":45},{"ruleId":"84","severity":1,"message":"87","line":3,"column":10,"nodeType":"82","messageId":"86","endLine":3,"endColumn":16},{"ruleId":"89","severity":1,"message":"101","line":17,"column":5,"nodeType":"91","messageId":"92","endLine":17,"endColumn":29,"fix":"102"},{"ruleId":"71","replacedBy":"103"},{"ruleId":"73","replacedBy":"104"},{"ruleId":"84","severity":1,"message":"105","line":3,"column":10,"nodeType":"82","messageId":"86","endLine":3,"endColumn":16},{"ruleId":"84","severity":1,"message":"106","line":50,"column":11,"nodeType":"82","messageId":"86","endLine":50,"endColumn":20},{"ruleId":"84","severity":1,"message":"107","line":60,"column":10,"nodeType":"82","messageId":"86","endLine":60,"endColumn":20},{"ruleId":"75","severity":1,"message":"108","line":71,"column":3,"nodeType":"82","endLine":71,"endColumn":12,"suggestions":"109"},{"ruleId":"89","severity":1,"message":"110","line":144,"column":3,"nodeType":"91","messageId":"92","endLine":144,"endColumn":37,"fix":"111"},{"ruleId":"84","severity":1,"message":"112","line":157,"column":9,"nodeType":"82","messageId":"86","endLine":157,"endColumn":24},{"ruleId":"84","severity":1,"message":"94","line":213,"column":6,"nodeType":"82","messageId":"86","endLine":213,"endColumn":12},"no-native-reassign",["113"],"no-negated-in-lhs",["114"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchData_net' and 'fetchData_unemployemnt'. Either include them or remove the dependency array.","ArrayExpression",["115"],["116"],"@typescript-eslint/no-redeclare","'rez' is already defined.","Identifier","redeclared","@typescript-eslint/no-unused-vars","'useState' is defined but never used.","unusedVar","'create' is defined but never used.","'axisText' is assigned a value but never used.","no-useless-rename","Destructuring assignment netEarningsData unnecessarily renamed.","Property","unnecessarilyRenamed",{"range":"117","text":"118"},"'xScale' is assigned a value but never used.","'useEffect' is defined but never used.","'scaleLinear' is defined but never used.","'max' is defined but never used.","'min' is defined but never used.","'mean' is defined but never used.","'select' is defined but never used.","Destructuring assignment vacancyData unnecessarily renamed.",{"range":"119","text":"120"},["113"],["114"],"'worker' is defined but never used.","'LineProps' is defined but never used.","'lineValues' is assigned a value but never used.","React Hook useEffect contains a call to 'setLineValues'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [values_unempScaled, lineRef] as a second argument to the useEffect Hook.",["121"],"Destructuring assignment unemploymentData unnecessarily renamed.",{"range":"122","text":"123"},"'lineChartHeight' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"124","fix":"125"},{"desc":"126","fix":"127"},[1329,1361],"netEarningsData",[316,340],"vacancyData",{"desc":"128","fix":"129"},[3307,3341],"unemploymentData","Update the dependencies array to be: [fetchData_net, fetchData_unemployemnt]",{"range":"130","text":"131"},"Update the dependencies array to be: [fetchData_net, fetchData_unemployemnt, selectedCountry]",{"range":"132","text":"133"},"Add dependencies array: [values_unempScaled, lineRef]",{"range":"134","text":"135"},[2533,2535],"[fetchData_net, fetchData_unemployemnt]",[2650,2667],"[fetchData_net, fetchData_unemployemnt, selectedCountry]",[2157,2157],", [values_unempScaled, lineRef]"]