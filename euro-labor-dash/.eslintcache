[{"C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\index.tsx":"1","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\reportWebVitals.ts":"2","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\App.tsx":"3","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\DashContainer.tsx":"4","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\ControlPanel.tsx":"5","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\services\\URLgenerationFunctions.tsx":"6","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\Earnings.tsx":"7","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\Vacancies.tsx":"8"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":234,"mtime":1607705143385,"results":"12","hashOfConfig":"10"},{"size":3755,"mtime":1610982076718,"results":"13","hashOfConfig":"10"},{"size":621,"mtime":1610980120750,"results":"14","hashOfConfig":"10"},{"size":1581,"mtime":1610980120756,"results":"15","hashOfConfig":"10"},{"size":5044,"mtime":1610982255641,"results":"16","hashOfConfig":"10"},{"size":482,"mtime":1610982210069,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"ofp5zp",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"35","usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":1,"source":"38","usedDeprecatedRules":"20"},"C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\index.tsx",[],["39","40"],"C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\reportWebVitals.ts",[],"C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\App.tsx",[],"C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\DashContainer.tsx",["41","42","43"],"import React, { useState, useEffect } from \"react\";\r\nimport ControlPanel from \"./ControlPanel\";\r\nimport {\r\n  generateFetchURL_net,\r\n  // generateFetchURL_gross,\r\n  generateFetchURL_vacancies,\r\n} from \"../services/URLgenerationFunctions\";\r\nimport Earnings from \"./Earnings\";\r\nimport Vacancies from \"./Vacancies\"\r\n\r\n\r\nconst DashContainer: React.FC = () => {\r\n  const [selectedCountry, setSelectedCountry] = useState<string>(\"Euro area\");\r\n  // const [grossEarningsData, setGrossEarningsData] = useState({\r\n  //   data: {},\r\n  //   isFetching: false,\r\n  //   status: \"\",\r\n\r\n  // });\r\n  const [netEarningsData, setNetEarningsData] = useState({\r\n    data: {},\r\n    isFetching: false,\r\n    status: \"\",\r\n  });\r\n  const [vacancyData, setVacancyData] = useState({\r\n    data:{}, \r\n    isFetching: false,\r\n    status: \"\",\r\n  })\r\n\r\n\r\n\r\n\r\n  function fetchData() {\r\n    // const fetchURL_gross: string = generateFetchURL_gross(selectedCountry);\r\n    const fetchURL_net: string = generateFetchURL_net(selectedCountry);\r\n\r\n    netEarningsData.isFetching=true\r\n\r\n    fetch(fetchURL_net)\r\n      .then((res) => res.json())\r\n      .then((res) =>\r\n        setNetEarningsData({\r\n          data: returnLabelsAndValues(res),\r\n          isFetching: false,\r\n          status: \"\",\r\n\r\n        })\r\n      )\r\n      .catch((error: string) =>\r\n        setNetEarningsData({ data: {}, isFetching: false, status: error, })\r\n      );\r\n\r\n  }\r\n\r\nfunction fetchData_vacancies(){\r\n\r\n  const fetchURL_vac: string = generateFetchURL_vacancies(selectedCountry);\r\n\r\n  netEarningsData.isFetching=true\r\n\r\n  fetch(fetchURL_vac)\r\n    .then((res) => res.json())\r\n    .then((res) =>\r\n        setVacancyData({\r\n        data: returnLabelsAndValues(res),\r\n        isFetching: false,\r\n        status: \"\",\r\n\r\n      })\r\n    )\r\n    .catch((error: string) =>\r\n       setVacancyData({ data: {}, isFetching: false, status: error, })\r\n    );\r\n\r\n}\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    fetchData_vacancies();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    fetchData_vacancies();\r\n  }, [selectedCountry]);\r\n\r\n  function changeCountry(newCountry: string): void {\r\n    setSelectedCountry(newCountry);\r\n  }\r\n\r\n  function returnLabelsAndValues(obj: any): any | null {\r\n    interface rez {\r\n      labels?: any | undefined;\r\n      values?: any | undefined;\r\n      seriesName?: any | undefined;\r\n    }\r\n\r\n    let rez = {\r\n      labels: null,\r\n      values: null,\r\n      seriesName: null,\r\n    };\r\n\r\n    if (Object.keys(obj).length < 3) {\r\n      return rez;\r\n    }\r\n\r\n    rez[\"labels\"] = obj.series.docs[0].period;\r\n    rez[\"values\"] = obj.series.docs[0].value;\r\n    rez[\"seriesName\"] = obj.series.docs[0].series_name;\r\n\r\n\r\n\r\n    return rez;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <ControlPanel\r\n          changeCountry={changeCountry}\r\n          defaultCountry=\"Euro area\"\r\n          // defaultCountry=\"Romania\"\r\n        />\r\n      </div>\r\n      <div>\r\n        <Vacancies \r\n        selectedCountry={selectedCountry}\r\n        vacancyData = {vacancyData.data}\r\n        isFetching = {vacancyData.isFetching}\r\n        \r\n\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <Earnings\r\n          netEarningsData={netEarningsData.data}\r\n          selectedCountry={selectedCountry}\r\n          isFetching={netEarningsData.isFetching}\r\n\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DashContainer;\r\n\r\n//   interface PropsWithChildren<netEarningsData>{\r\n//     labels: any | undefined;\r\n//     values?: any | undefined;\r\n//     seriesName?: any | undefined;\r\n// }\r\n// interface intrinsicAttributes{\r\n//   netEarningsData: {lables: any, values: any }\r\n// }\r\n\r\n// interface netEarningsData{\r\n//   labels: any | undefined;\r\n//   values?: any | undefined;\r\n//   seriesName?: any | undefined;\r\n// }\r\n","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\ControlPanel.tsx",[],"C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\services\\URLgenerationFunctions.tsx",[],["44","45"],"C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\Earnings.tsx",["46","47","48","49","50"],"import React, { useEffect, useState } from \"react\";\r\nimport { scaleLinear, max, min, mean, select } from \"d3\";\r\nimport { create } from \"domain\";\r\n\r\nconst animateBars = (rectRef: any, y_net: number, barHeight_net: number) => {\r\n  const rect = select(rectRef.current);\r\n\r\n  rect\r\n\r\n    .transition()\r\n    .duration(1000)\r\n    .attr(\"height\", barHeight_net)\r\n    .attr(\"y\", y_net);\r\n};\r\n\r\ninterface BarProps {\r\n  x: number;\r\n  y_net: number;\r\n  barWidth: number;\r\n  barHeight_net: number;\r\n  yValue: number;\r\n  yearLabel: any;\r\n  yearLableYPoz: number;\r\n}\r\n\r\nconst Bar: React.FC<BarProps> = ({\r\n  x,\r\n  y_net,\r\n  barWidth,\r\n  barHeight_net,\r\n  yValue,\r\n  yearLabel,\r\n  yearLableYPoz,\r\n}) => {\r\n  if (isNaN(y_net)) {\r\n    y_net = 0;\r\n  }\r\n\r\n  const axisText: number = 125;\r\n  const rectRef: any = React.createRef();\r\n\r\n  useEffect(() => {\r\n    animateBars(rectRef, y_net, barHeight_net);\r\n  });\r\n\r\n  return (\r\n    <g>\r\n      <rect ref={rectRef} x={x} width={barWidth} fill=\"black\" />\r\n      <text\r\n        x={x}\r\n        y={yearLableYPoz}\r\n        // style={{transform:'rotate(1deg)'}}\r\n      >\r\n        {yearLabel}\r\n      </text>\r\n    </g>\r\n  );\r\n};\r\n\r\ninterface EarningsProps {\r\n  children?: any;\r\n  selectedCountry?: string;\r\n  netEarningsData: any;\r\n\r\n  isFetching: boolean;\r\n}\r\n\r\nconst Earnings: React.FC<EarningsProps> = ({\r\n  netEarningsData: netEarningsData,\r\n  selectedCountry,\r\n  isFetching,\r\n}) => {\r\n  const barAreaHeight = 400;\r\n  const barAreaWidth = 700;\r\n  const margin = { top: 30, right: 70, bottom: 10, left: 50 };\r\n  const barChartHeight = barAreaHeight - margin.bottom;\r\n\r\n  const barDimensions = {\r\n    barWidth: 12,\r\n    barSideMargin: 0.2,\r\n    centerToCenter: 40,\r\n    labelMarginTop: 2,\r\n  };\r\n\r\n  let labels: Array<any> = [];\r\n  let values_net: Array<Number> = [1, 2, 3];\r\n  let yScale_net: any;\r\n  let yAxisValues :Array<Number> = [];\r\n\r\n\r\n  let bars: any = <rect></rect>;\r\n\r\n  function generateYaxisValues(ar :Number[]){\r\n    const point1  = min(ar)\r\n    const point5 = max(ar)\r\n    const point3 = mean([point1, point5])\r\n    const point2 = mean([point1, point3])\r\n    const point4 =  mean([point5, point3])\r\n    let rez  = [point5, point4, point3, point2, point1]\r\n\r\n    return rez.map((el :any)=>Math.round(el))\r\n  }\r\n\r\n\r\n  values_net = netEarningsData.values;\r\n  if (values_net !== undefined) {\r\n    labels = netEarningsData.labels.map((year: any) => parseInt(year));\r\n  }\r\n\r\n  if (min(labels) < 2005 && values_net !== undefined) {\r\n    const elementsToSlice = 2005 - min(labels);\r\n    labels = labels.slice(elementsToSlice);\r\n    values_net = values_net.slice(elementsToSlice);\r\n  }\r\n\r\n  if (min(labels) > 2005 && values_net !== undefined) {\r\n    const minYear = min(labels);\r\n    const elementsToAdd: number = minYear - 2005;\r\n\r\n    for (let i = 0; i < elementsToAdd; i++) {\r\n      labels.unshift(labels[0] - 1);\r\n      values_net.unshift(0);\r\n    }\r\n\r\n    values_net = values_net.slice(elementsToAdd);\r\n  }\r\n\r\n\r\n\r\n  if (values_net !== undefined) {\r\n    yScale_net = scaleLinear()\r\n      .domain([min(values_net) as number, max(values_net) as number])\r\n      .range([margin.bottom, barAreaHeight - margin.top]);\r\n  } else {\r\n    //used as a placeholder when waiting for values to arrive\r\n    yScale_net = scaleLinear().domain([0, 100]).range([5, barChartHeight]);\r\n  }\r\n\r\n  const xScale = scaleLinear()\r\n    .domain([min(labels) as number, max(labels) as number])\r\n    .range([margin.left, barAreaWidth]);\r\n\r\n  if (values_net !== undefined) {\r\n    values_net  =values_net.map((el :any)=>Math.round(el))\r\n\r\n    yAxisValues = generateYaxisValues(values_net)\r\n    console.log(yAxisValues)\r\n\r\n\r\n\r\n    bars = values_net.map((row: any, ind: number) => (\r\n      <Bar\r\n        x={ind * barDimensions.centerToCenter + margin.left}\r\n        y_net={\r\n          values_net === undefined || values_net.length === 0\r\n            ? 0\r\n            : barChartHeight - yScale_net(values_net[ind])-10\r\n        }\r\n        barWidth={barDimensions.barWidth}\r\n        barHeight_net={\r\n          values_net === undefined || values_net.length === 0\r\n            ? 0\r\n            : yScale_net(values_net[ind])\r\n        }\r\n        yValue={0}\r\n        key={ind}\r\n        yearLabel={labels[ind]}\r\n        yearLableYPoz={barChartHeight + margin.bottom}\r\n      />\r\n    ));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* <div>{JSON.stringify(netEarningsData)}</div> */}\r\n\r\n      <div>{`${selectedCountry} Net Earnings`}</div>\r\n\r\n      <div style={{ backgroundColor: \"grey\", height: 400, width: 700 }}>\r\n        <svg width={barAreaWidth} height={barAreaHeight}>\r\n          {yAxisValues.map(el=>(\r\n            <text key={`yaxis ${el}`} x={5} y={barAreaHeight-yScale_net(el)}>{el}</text>\r\n          ))}\r\n          <line\r\n            id=\"xAxis\"\r\n            x1={margin.left}\r\n            y1={barChartHeight - margin.bottom}\r\n            x2={barAreaWidth - margin.right}\r\n            y2={barChartHeight - margin.bottom}\r\n            stroke=\"black\"\r\n          />\r\n\r\n          {bars}\r\n        </svg>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Earnings;\r\n","C:\\Users\\Admin\\Documents\\js\\react\\euro-labor-dash\\euro-labor-dash\\src\\components\\Vacancies.tsx",["51","52","53","54","55","56","57","58","59"],"import React, { useEffect, useState } from \"react\";\r\nimport { scaleLinear, max, min, mean, select } from \"d3\";\r\nimport { create } from \"domain\";\r\n\r\n\r\ninterface VacancyProps{\r\n\r\n    selectedCountry?: string;\r\n    vacancyData: any;\r\n    isFetching: boolean;\r\n}\r\n\r\n\r\n\r\n\r\nconst Vacancies: React.FC<VacancyProps>=({\r\n    vacancyData: vacancyData, \r\n    selectedCountry, \r\n    isFetching\r\n\r\n\r\n}) =>{\r\n\r\n    return  <div>{JSON.stringify(vacancyData)}</div>\r\n}\r\n\r\n\r\nexport default Vacancies",{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":81,"column":6,"nodeType":"66","endLine":81,"endColumn":8,"suggestions":"67"},{"ruleId":"64","severity":1,"message":"65","line":86,"column":6,"nodeType":"66","endLine":86,"endColumn":23,"suggestions":"68"},{"ruleId":"69","severity":1,"message":"70","line":99,"column":9,"nodeType":"71","messageId":"72","endLine":99,"endColumn":12},{"ruleId":"60","replacedBy":"73"},{"ruleId":"62","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":1,"column":28,"nodeType":"71","messageId":"77","endLine":1,"endColumn":36},{"ruleId":"75","severity":1,"message":"78","line":3,"column":10,"nodeType":"71","messageId":"77","endLine":3,"endColumn":16},{"ruleId":"75","severity":1,"message":"79","line":39,"column":9,"nodeType":"71","messageId":"77","endLine":39,"endColumn":25},{"ruleId":"80","severity":1,"message":"81","line":69,"column":3,"nodeType":"82","messageId":"83","endLine":69,"endColumn":35,"fix":"84"},{"ruleId":"75","severity":1,"message":"85","line":139,"column":9,"nodeType":"71","messageId":"77","endLine":139,"endColumn":15},{"ruleId":"75","severity":1,"message":"86","line":1,"column":17,"nodeType":"71","messageId":"77","endLine":1,"endColumn":26},{"ruleId":"75","severity":1,"message":"76","line":1,"column":28,"nodeType":"71","messageId":"77","endLine":1,"endColumn":36},{"ruleId":"75","severity":1,"message":"87","line":2,"column":10,"nodeType":"71","messageId":"77","endLine":2,"endColumn":21},{"ruleId":"75","severity":1,"message":"88","line":2,"column":23,"nodeType":"71","messageId":"77","endLine":2,"endColumn":26},{"ruleId":"75","severity":1,"message":"89","line":2,"column":28,"nodeType":"71","messageId":"77","endLine":2,"endColumn":31},{"ruleId":"75","severity":1,"message":"90","line":2,"column":33,"nodeType":"71","messageId":"77","endLine":2,"endColumn":37},{"ruleId":"75","severity":1,"message":"91","line":2,"column":39,"nodeType":"71","messageId":"77","endLine":2,"endColumn":45},{"ruleId":"75","severity":1,"message":"78","line":3,"column":10,"nodeType":"71","messageId":"77","endLine":3,"endColumn":16},{"ruleId":"80","severity":1,"message":"92","line":17,"column":5,"nodeType":"82","messageId":"83","endLine":17,"endColumn":29,"fix":"93"},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchData' and 'fetchData_vacancies'. Either include them or remove the dependency array.","ArrayExpression",["96"],["97"],"@typescript-eslint/no-redeclare","'rez' is already defined.","Identifier","redeclared",["94"],["95"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","unusedVar","'create' is defined but never used.","'axisText' is assigned a value but never used.","no-useless-rename","Destructuring assignment netEarningsData unnecessarily renamed.","Property","unnecessarilyRenamed",{"range":"98","text":"99"},"'xScale' is assigned a value but never used.","'useEffect' is defined but never used.","'scaleLinear' is defined but never used.","'max' is defined but never used.","'min' is defined but never used.","'mean' is defined but never used.","'select' is defined but never used.","Destructuring assignment vacancyData unnecessarily renamed.",{"range":"100","text":"101"},"no-global-assign","no-unsafe-negation",{"desc":"102","fix":"103"},{"desc":"104","fix":"105"},[1329,1361],"netEarningsData",[316,340],"vacancyData","Update the dependencies array to be: [fetchData, fetchData_vacancies]",{"range":"106","text":"107"},"Update the dependencies array to be: [fetchData, fetchData_vacancies, selectedCountry]",{"range":"108","text":"109"},[1960,1962],"[fetchData, fetchData_vacancies]",[2040,2057],"[fetchData, fetchData_vacancies, selectedCountry]"]